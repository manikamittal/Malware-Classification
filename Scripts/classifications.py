from config import conf
from csvToArray import featureArray
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import RadiusNeighborsClassifier
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import linear_model
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.svm import NuSVC
from sklearn.svm import LinearSVC
from plotAccuracy import plotAccuracy


trainData, trainLabel = featureArray(conf['train']['feature_vector'])
testData, testLabel = featureArray(conf['test']['feature_vector'])
guideToGraph = {}

def knnClassifier():
    neigh = KNeighborsClassifier(n_neighbors=5, algorithm='auto', p=2)
    neigh.fit(trainData, trainLabel)
    guideToGraph['KNN'] = neigh.score(testData,testLabel)

    neighRadius = RadiusNeighborsClassifier(radius=500, weights='distance',algorithm='auto', p=2,metric='minkowski')
    neighRadius.fit(trainData, trainLabel)
    guideToGraph['Radius Neighbor'] = neigh.score(testData,testLabel)


def decisionTreeClassifier():

    maxRandomPerformance = []
    for value in xrange(10):
        clf = tree.DecisionTreeClassifier(criterion='entropy')
        clf.fit(trainData, trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))

    guideToGraph['Decision (IG)'] = max(maxRandomPerformance)

    maxRandomPerformance = []
    for value in xrange(10):
        clf = tree.DecisionTreeClassifier(criterion='gini')
        clf.fit(trainData, trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))

    guideToGraph['Decision (Gini)'] = max(maxRandomPerformance)

def randomForestClassify():


    maxRandomPerformance = []
    for value in xrange(1,50):
        clf = RandomForestClassifier(n_estimators = value,criterion='entropy')
        clf = clf.fit(trainData,trainLabel)
        score = clf.score(testData,testLabel)
        maxRandomPerformance.append(score)

    guideToGraph['Random Forests'] = max(maxRandomPerformance)

    clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0).fit(trainData, trainLabel)
    guideToGraph['Gradient Boosting'] = clf.score(testData,testLabel)

def regression():

    clf = linear_model.Ridge (alpha = .5)
    clf = clf.fit(trainData,trainLabel)
    guideToGraph['Ridge Regression'] = clf.score(testData,testLabel)

    clf = linear_model.LogisticRegression(penalty='l2', dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='newton-cg', max_iter=1000, multi_class='ovr', verbose=0, warm_start=False, n_jobs=2)
    clf = clf.fit(trainData,trainLabel)
    guideToGraph['Logistic Regression'] = clf.score(testData,testLabel)


def gaussianNBClassifier():
    clf = GaussianNB()
    clf.fit(trainData, trainLabel)
    guideToGraph['Gaussian Naive Bayes'] = clf.score(testData,testLabel)


def multinomialNBClassifier():
    clf = MultinomialNB()
    clf.fit(trainData, trainLabel)
    guideToGraph['Multinomial Naive Bayes'] = clf.score(testData,testLabel)



def bernaulliNBClassifier():
    clf = BernoulliNB()
    clf.fit(trainData, trainLabel)
    guideToGraph['Bernaulli Naive Bayes'] = clf.score(testData,testLabel)


def polyNuSVC():
    maxRandomPerformance = []
    for deg in xrange(1,200):
        clf = NuSVC(kernel="poly",degree=deg)
        clf.fit(trainData, trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))
    guideToGraph['Polynomial Nu-SVC'] = max(maxRandomPerformance)

def linearNuSVC():
    clf = NuSVC(kernel="linear")
    clf.fit(trainData, trainLabel)
    guideToGraph['Linear Nu-SVC'] = clf.score(testData,testLabel)

def rbfNuSVC():
    maxRandomPerformance = []
    for gamma in xrange(1,200):
        clf = NuSVC(gamma=gamma)
        clf.fit(trainData, trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))
    guideToGraph['RBF Nu-SVC'] = max(maxRandomPerformance)


def sigmoidNuSVC():
    maxRandomPerformance = []
    for gamma in xrange(1,200):
        clf = NuSVC(kernel="sigmoid",gamma=gamma)
        clf.fit(trainData, trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))
    guideToGraph['Sigmoid Nu-SVC'] = max(maxRandomPerformance)

def linearSVCClass():
    maxRandomPerformance = []
    for value in xrange(10):
        clf = LinearSVC(penalty='l2', loss='hinge', dual=True, tol=0.0001, C=1.0, multi_class='crammer_singer', fit_intercept=True, intercept_scaling=1, class_weight=None, verbose=0, random_state=None, max_iter=1000)
        clf = clf.fit(trainData,trainLabel)
        maxRandomPerformance.append(clf.score(testData,testLabel))
    guideToGraph['Linear SVC'] = max(maxRandomPerformance)


knnClassifier()
decisionTreeClassifier()
randomForestClassify()
regression()
gaussianNBClassifier()
multinomialNBClassifier()
bernaulliNBClassifier()
polyNuSVC()
linearNuSVC()
rbfNuSVC()
sigmoidNuSVC()

print ">Accuracies"
print guideToGraph
plotAccuracy(guideToGraph)
